
-- first Query: Write an SQL query to calculate the total revenue generated by the company
select sum(p.Price*od.Quantity) AS Total_Amount_of_Revenue
from order_details od inner join products p on od.ProductID=p.ProductID;

-- Second Query: Write an SQL query to calculate the total revenue generated by the company
select c.CustomerID, c.CustomerName, sum(p.Price*od.Quantity) AS Total_Amount_of_Purchase
from customers c inner join orders o on c.CustomerID= o.CustomerID inner join order_details od 
on o.OrderID= od.OrderID inner join products p on od.ProductID=p.ProductID
group by c.CustomerID
limit 5;

-- Third QUery: Write an SQL query to calculate the total revenue generated by the company
select month(OrderDate) AS Month, avg(p.Price*od.Quantity) AS AVG_Amount_of_Purchase
from orders o inner join order_details od on o.OrderID = od.OrderID inner join  products p on od.ProductID=p.ProductID
group by Month;


-- Fourth Query:Write an SQL query to identify the top-selling product category
select cat.CategoryName, count(od.OrderID) as total
from order_details od inner join products p on od.ProductID=p.ProductID inner join categories cat on p.CategoryID= cat.CategoryID
group by cat.CategoryName
order by total desc;

-- Fifth Query:Write an SQL query to calculate the total revenue generated by each product category.
-- The result should include the category and the total revenue.
select cat.CategoryName, sum(p.Price*od.Quantity) as total
from order_details od inner join products p on od.ProductID=p.ProductID inner join categories cat on p.CategoryID= cat.CategoryID
group by cat.CategoryName
order by total desc;

-- Sixth Query:Write an SQL query to find the month with the highest revenue and the total revenue.
select max(Month) as Month , max(TotalRevenue) as MaxRevenue
from(  select month(o.OrderDate) as Month,sum(p.Price*od.Quantity) as TotalRevenue
	   from orders o inner join order_details od on o.OrderID=od.OrderID inner join products p on od.ProductID=p.ProductID
	    group by Month) as RevenueByMonth;


-- Seventh Query (not right):Write an SQL query to calculate the customer retention rate. Consider customers who
-- have made at least one purchase in the previous year as retained customers.
select (count(c1.CustomerID)/91)*100
FROM customers c1
where exists (select year(o.OrderDate) as a
	    from customers c left join orders o on c.CustomerID=o.CustomerID
        where c1.CustomerID= c.CustomerID and year(o.OrderDate)=1996);
	
-- Eight Query:Write an SQL query to calculate the average order value for each customer, considering
--only customers who have made more than three purchases. Include the CustomerID,
--CustomerName, and the average order value.

select c1.CustomerName, c1.CustomerID, AVG(p.Price*od.Quantity) as AVGOrderValue
from customers c1 inner join orders o on c1.CustomerID= o.CustomerID inner join order_details od 
on o.OrderID= od.OrderID inner join products p on od.ProductID=p.ProductID
where c1.CustomerID IN (
select c.CustomerID
from customers c inner join orders o on c.CustomerID= o.CustomerID
group by c.CustomerID
having COUNT(o.OrderID) > 3) 
group by c1.CustomerName, c1.CustomerID;

-- CUSTOMERS WITH MORE THAN 3 PURCHASES
select c.CustomerID
from customers c inner join orders o on c.CustomerID= o.CustomerID
group by c.CustomerID
having COUNT(o.OrderID) > 3;

-- nineth Query: Write an SQL query to calculate the average order value for each customer, considering 
-- only customers who have made more than three purchases. Include the CustomerID,
-- CustomerName, and the average order value.
select c1.CustomerName, c1.CustomerID, AVG(p.Price*od.Quantity) as AVGOrderValue
from customers c1 inner join orders o on c1.CustomerID= o.CustomerID inner join order_details od 
on o.OrderID= od.OrderID inner join products p on od.ProductID=p.ProductID
group by c1.CustomerName, c1.CustomerID
order by AVGOrderValue desc
limit 3;

-- tenth Query:Write an SQL query to calculate the monthly revenue growth rate. Compare the revenue
-- of each month with the previous month and calculate the percentage growth. The result
-- should include the month and the growth rate
 select MonthM, TotalRevenue - lag(TotalRevenue) over (order by MonthM asc) as MonthlyRevenueGrowth
 from( select month(o.OrderDate) as MonthM,sum(p.Price*od.Quantity) as TotalRevenue
	   from orders o inner join order_details od on o.OrderID=od.OrderID inner join products p on od.ProductID=p.ProductID
       group by month(o.OrderDate)
       order by MonthM) as RevenueByMonth;

-- Eleventh Query: Write an SQL query to identify the top-selling product in each product category based on
-- the total revenue generated. Include the category, ProductName, and total revenue.
select distinct cat.CategoryName, p.ProductName,(p.Price*od.Quantity)  as TotalRevenue
from order_details od inner join products p on od.ProductID= p.ProductID inner join categories cat on p.CategoryID=cat.CategoryID
where  (p.Price*od.Quantity) in ( select max(p1.Price*od1.Quantity)
                                     from order_details od1 inner join products p1 on od1.ProductID= p1.ProductID inner join categories cat1 on p1.CategoryID=cat1.CategoryID
                                     group by cat1.CategoryID
);

-- 	Twelfth Query:Write an SQL query to calculate the customer lifetime value (CLV) for each customer.
-- CLV is the average revenue generated by a customer over their entire lifetime. Include
the CustomerID, CustomerName, and the CLV.
select c.CustomerID, c.CustomerName, sum(p.Price*od.Quantity)/count(distinct o.orderID) as clv
from customers c left join orders o on c.CustomerID=o.CustomerID left join order_details od on o.OrderID=od.OrderID left join products p on od.ProductID=p.ProductID
group by c.CustomerID, c.CustomerName;

-- 	Fourteenth Queries: Write an SQL query to calculate the average time between a customer's first and second
-- purchase. Include the CustomerID, CustomerName, and the average time in days.

with FirstPurchase as
(select c.CustomerID, min(o.OrderDate) AS DateofFirstPurchase
from customers c inner join orders o on c.CustomerID = o.CustomerID
group by c.CustomerID
)
select fp.CustomerID, fp.DateofFirstPurchase, second_purchase.DateOfSecondPurchase,
(DATEDIFF( second_purchase.DateOfSecondPurchase, fp.DateofFirstPurchase))/2 AS Average_days
from   FirstPurchase fp
inner join (select c1.CustomerID, min(o1.OrderDate) as DateOfSecondPurchase
             from customers c1 inner join orders o1 on c1.CustomerID = o1.CustomerID inner join FirstPurchase fp1 on c1.CustomerID = fp1.CustomerID
             where o1.OrderDate > fp1.DateofFirstPurchase
             group by c1.CustomerID
    ) second_purchase on fp.CustomerID = second_purchase.CustomerID;
    
-- Fifteenth Query: Write an SQL query to find the customers who have not made any purchases in the last
-- six months. Include their CustomerID, CustomerName, and the date of their last purchase.
select c.CustomerID, c.CustomerName,
    (select max(o.OrderDate)
        from orders o
        where o.CustomerID = c.CustomerID
    ) as LastPurchaseDate
from customers c
where c.CustomerID not in ( select o.CustomerID
                           from  orders o 
                           where o.OrderDate <=DATE_SUB('1997-02-12', INTERVAL 6 MONTH)
                           );
    
-- Sixteenth Query: Write an SQL query to calculate the average number of orders per day of the week
--(Monday, Tuesday, etc.). The result should include the day of the week and the average number of orders.
select dayname(OrderDate) as day, count(OrderID)/count(distinct date (OrderDate)) as avgOrders
from orders
group by day;

-- seventeenth:  Write an SQL query to identify the top 5 months with the highest number of new
--customers (customers who joined in that month). Include the month and the count of new customers.
with NewCustomers as
( select CustomerID, min(OrderDate) as FirstOrder, year(min(OrderDate)) as yr, month(min(OrderDate)) as month
  from orders
  group by CustomerID
)
select month, count(CustomerID) as CountOfNewCustomers
from NewCustomers
group by month
order by CountOfNewCustomers desc
limit 5;

 
 